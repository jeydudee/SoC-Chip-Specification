RX_RDY		EQU  0001
TX_RDY		EQU  0002
ADDR			EQU  R3
LED			EQU  R4
COUNT1		EQU  R6
COUNT2		EQU  R7
CHAR_COUNT		EQU  R8
CHAR_COUNT_REG	EQU  R9
BANNER		EQU  RA
PROMPT		EQU  RB
PROMPT_START	EQU  RC
HOMETOWN		EQU  RD
DIGIT			EQU  RE
BACKSPACE		EQU  RF

; R0 - checks status
; R1 - echo register
; R2 - subtrahend for binary to ascii conversion 
; R5 - scratchpad write


START
		LOAD COUNT1, 0000
		LOAD COUNT2, 0000
		LOAD LED, 0001
		LOAD CHAR_COUNT, 0000
		LOAD CHAR_COUNT_REG, 0000
		LOAD BANNER, 0001
		LOAD PROMPT, 0000
		LOAD PROMPT_START, 0000
		LOAD HOMETOWN, 0000
		LOAD BACKSPACE, 0000
		
		
		LOAD  R5, 0043 ;C	
		STORE R5, 0000
		LOAD  R5, 0053 ;S
		STORE R5, 0001
		LOAD  R5, 0055 ;U
		STORE R5, 0002
		LOAD  R5, 004C ;L
		STORE R5, 0003
		LOAD  R5, 0042 ;B
		STORE R5, 0004
		LOAD  R5, 0020 ;(SPACE)
		STORE R5, 0005

		LOAD  R5, 0043 ;C	
		STORE R5, 0006
		LOAD  R5, 0045 ;E
		STORE R5, 0007
		LOAD  R5, 0043 ;C	
		STORE R5, 0008
		LOAD  R5, 0053 ;S
		STORE R5, 0009
		LOAD  R5, 0020 ;(SPACE)
		STORE R5, 000A

		LOAD  R5, 0034 ;4
		STORE R5, 000B
		LOAD  R5, 0036 ;6
		STORE R5, 000C
		LOAD  R5, 0030 ;0
		STORE R5, 000D
		LOAD  R5, 0020 ;(SPACE)
		STORE R5, 000E
		
		LOAD  R5, 0050 ;P
		STORE R5, 000F		
		LOAD  R5, 0052 ;R
		STORE R5, 0010
		LOAD  R5, 004F ;O
		STORE R5, 0011		
		LOAD  R5, 004A ;J
		STORE R5, 0012
		LOAD  R5, 0045 ;E
		STORE R5, 0013		
		LOAD  R5, 0043 ;C
		STORE R5, 0014
		LOAD  R5, 0054 ;T
		STORE R5, 0015		
		LOAD  R5, 0020 ;(SPACE)
		STORE R5, 0016

		LOAD  R5, 0033 ;3
		STORE R5, 0017
		LOAD  R5, 0020 ;(SPACE)
		STORE R5, 0018

		LOAD  R5, 002D ;-
		STORE R5, 0019		
		LOAD  R5, 0020 ;(SPACE)
		STORE R5, 001A

		LOAD  R5, 0046 ;F
		STORE R5, 001B
		LOAD  R5, 0055 ;U
		STORE R5, 001C		
		LOAD  R5, 004C ;L
		STORE R5, 001D
		LOAD  R5, 004C ;L
		STORE R5, 001E		
		LOAD  R5, 0020 ;(SPACE)
		STORE R5, 001F

		LOAD  R5, 0055 ;U
		STORE R5, 0020
		LOAD  R5, 0041 ;A
		STORE R5, 0021		
		LOAD  R5, 0052 ;R
		STORE R5, 0022
		LOAD  R5, 0054 ;T
		STORE R5, 0023
		
		LOAD  R5, 000D ;<CR>
		STORE R5, 0024
		LOAD  R5, 000A ;<LF>
		STORE R5, 0025

		LOAD  R5, 0054 ;T
		STORE R5, 0026
		LOAD  R5, 0059 ;Y
		STORE R5, 0027		
		LOAD  R5, 0050 ;P
		STORE R5, 0028
		LOAD  R5, 0045 ;E
		STORE R5, 0029		
		LOAD  R5, 0020 ;(SPACE)
		STORE R5, 002A

		LOAD  R5, 0048 ;H
		STORE R5, 002B
		LOAD  R5, 0045 ;E
		STORE R5, 002C		
		LOAD  R5, 0052 ;R
		STORE R5, 002D
		LOAD  R5, 0045 ;E
		STORE R5, 002E		
		LOAD  R5, 003A ;:
		STORE R5, 002F
		LOAD  R5, 0020 ;(SPACE)
		STORE R5, 0030
		

		LOAD  R5, 000D ;<CR>
		STORE R5, 0031
		LOAD  R5, 000A ;<LF>
		STORE R5, 0032
		LOAD  R5, 0047 ;G
		STORE R5, 0033
		LOAD  R5, 0041 ;A
		STORE R5, 0034		
		LOAD  R5, 0052 ;R
		STORE R5, 0035
		LOAD  R5, 0044 ;D
		STORE R5, 0036		
		LOAD  R5, 0045 ;E
		STORE R5, 0037
		LOAD  R5, 004E ;N
		STORE R5, 0038
		LOAD  R5, 0020 ;(SPACE)
		STORE R5, 0039
		
		LOAD  R5, 0047 ;G
		STORE R5, 003A
		LOAD  R5, 0052 ;R
		STORE R5, 003B		
		LOAD  R5, 004F ;O
		STORE R5, 003C
		LOAD  R5, 0056 ;V
		STORE R5, 003D		
		LOAD  R5, 0045 ;E
		STORE R5, 003E
		LOAD  R5, 000D ;<CR>
		STORE R5, 003F
		LOAD  R5, 000A ;<LF>
		STORE R5, 0040

		LOAD  R5, 0020 ;(SPACE)
		STORE R5, 0041
		LOAD  R5, 0008 ;<BS>
		STORE R5, 0042
		
		LOAD  R5, 000D ;<CR>
		STORE R5, 0043
		LOAD  R5, 000A ;<LF>
		STORE R5, 0044

           ENINT

; main loop

FIRST		
		OUTPUT LED, 0001
		ADD COUNT1, 0001
		CALLC AGAIN
		JUMP FIRST

AGAIN
		ADD COUNT2, 0C00
		CALLC SHIFT
		RETURN

SHIFT		
		SL0 LED
		COMP LED, 0100
		CALLZ RST_LED
		RETURN

RST_LED	
		SL1 LED
		RETURN

; address for interrupt service routine

           ADDRESS 0300 

; set up for loop in isr

ISR		
           INPUT R0 , 0001
           AND R0, RX_RDY
           CALLNZ CHECK_RX	

		INPUT R0, 0001
		AND R0, TX_RDY
		CALLNZ TRANSMIT
		

		RETEN

; Rx Engine echo

CHECK_RX
		INPUT R1, 0000
		COMP R1, 000D			; if Rx = <CR>
		CALLZ NEW_LINE

		COMP R1, 002A 			; if Rx = *
		CALLZ HOMETOWN_INIT
		
		COMP R1, 0040 			;if Rx = @
		CALLZ BIN_TO_ASCII
	
		COMP R1, 0008 			;if Rx = DEL
		CALLZ BACKSPACE_INIT
		
		COMP R1, 0040
		JUMPZ END_RX
		COMP R1, 002A
		JUMPZ END_RX
		
		CALL ECHO

		COMP CHAR_COUNT, 0028
		CALLZ FORTY_CHAR

END_RX	RETURN	

NEW_LINE
		LOAD ADDR, 0025
		LOAD BANNER, 0001
		RETURN

HOMETOWN_INIT
		LOAD HOMETOWN, 0001
		LOAD ADDR, 0031
		RETURN

BACKSPACE_INIT
		COMP CHAR_COUNT, 0000
		JUMPZ BACKSPACE_RET
		SUB CHAR_COUNT, 0002	
		LOAD BACKSPACE, 0001
		LOAD ADDR, 0041
		RETURN

BACKSPACE_RET
		SUB CHAR_COUNT, 0001
		LOAD PROMPT, 0001
		LOAD PROMPT_START, 0001
		LOAD ADDR, 0030
		RETURN

FORTY_CHAR
		LOAD ADDR, 0024
		LOAD BANNER, 0001
		RETURN

BIN_TO_ASCII
		LOAD CHAR_COUNT_REG, CHAR_COUNT

		LOAD R2, 000A ;10
		CALL FIND_IT
		ADD DIGIT, 0030
		STORE DIGIT, 0045

		ADD CHAR_COUNT_REG, 0030
		STORE CHAR_COUNT_REG, 0046

		LOAD CHAR_COUNT_REG, 0001
		LOAD ADDR, 0043	
		RETURN

FIND_IT	LOAD DIGIT, 0000
LOOP		SUB CHAR_COUNT_REG, R2
		JUMPC EXIT_LOOP
		ADD DIGIT, 0001
		JUMP LOOP
EXIT_LOOP	ADD CHAR_COUNT_REG, R2
		RETURN

ECHO
		OUTPUT R1, 0000
		COMP HOMETOWN, 0001
		JUMPZ END_ECHO
		COMP CHAR_COUNT_REG, 0001
		JUMPZ END_ECHO
		ADD CHAR_COUNT, 0001
END_ECHO	RETURN

; Tx Engine transmit

TRANSMIT
		COMP PROMPT, 0001
		CALLZ START_PROMPT
 
		COMP BANNER, 0001
		CALLZ START_TX

		COMP HOMETOWN, 0001
		CALLZ DISPLAY_HOMETOWN

		COMP BACKSPACE, 0001
		CALLZ DISPLAY_BACKSPACE

		COMP CHAR_COUNT_REG, 0001
		CALLZ DISPLAY_CHAR_COUNT
		RETURN
		
START_PROMPT
		LOAD PROMPT, 0001
		COMP PROMPT_START, 0001
		JUMPZ DISPLAY
		LOAD ADDR, 0026
		LOAD PROMPT_START, 0001
DISPLAY	CALL START_TX
		RETURN

START_TX	FETCH R5, ADDR
		OUTPUT R5, 0000
		ADD ADDR, 0001
		COMP ADDR, 0026
		CALLZ RST_BANNER
		COMP ADDR, 0031
		CALLZ RST_PROMPT
		RETURN

DISPLAY_HOMETOWN
		FETCH R5, ADDR
		OUTPUT R5, 0000
		ADD ADDR, 0001
		COMP ADDR, 0040
		CALLZ RST_HOMETOWN
		RETURN

DISPLAY_BACKSPACE
		FETCH R5, ADDR
		OUTPUT R5, 0000
		ADD ADDR, 0001
		COMP ADDR, 0043
		CALLZ RST_BACKSPACE
		RETURN

DISPLAY_CHAR_COUNT
		FETCH R5, ADDR
		OUTPUT R5, 0000
		ADD ADDR, 0001
		COMP ADDR, 0047
		CALLZ RST_CHAR_COUNT
		RETURN

RST_BANNER	LOAD BANNER, 0000
		LOAD PROMPT, 0001
		RETURN

RST_PROMPT	LOAD PROMPT, 0000
		LOAD PROMPT_START, 0000
		LOAD CHAR_COUNT, 0000
		LOAD ADDR, 0000
		RETURN

RST_BACKSPACE
		LOAD BACKSPACE, 0000
		RETURN

RST_HOMETOWN
		LOAD HOMETOWN, 0000
		CALL NEW_LINE
		RETURN

RST_CHAR_COUNT
		LOAD CHAR_COUNT_REG, 0000
		CALL FORTY_CHAR
		RETURN

; ISR vectored through 0FFE

		ADDRESS 0FFE

ENDIT		JUMP ISR

		END
